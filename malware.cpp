#include "stdafx.h"
#include <Windows.h>
#include <iostream>
#include <string>
#include <bitset>
#include <regex>
#include <stdio.h>
#include <stdlib.h>
using namespace std;

int cle[] = {1,2,3,4,5,6,7};
string msg_b = "Cpbrj&&!Vv$du'uplqsc'";
string msg_s = "Pj&etl#i\"z\"quyeuofm'=$nrnm'gsrz\"m!ui>opnlumn!tm'ry>kiish$j&8<'fe!ge\"lui\"4";
string msg_m = "Rg irk otbgrojk : krrk juoz iutzktox jky igxgizkxky nkdgjkiosgad.";

char mm[] = {'\x4d'};
char a1[] = {'\x41'};
char l[] = {'\x4c'};
char w[] = {'\x57'};
char a2[] = {'\x41'};
char r[] = {'\x52'};
char e[] = {'\x45'};

void CM(string &s2)        
{
	int k2 = 6;
		for(unsigned int i=0; i<s2.length(); i++)
		{
			if(97 <= s2[i] && s2[i] <= 122)      
			{
				s2[i] = ((s2[i] - k2 - 122) % 26) + 122;
	            cout<<s2[i]; 
			}
	        else if(65 <= s2[i] && s2[i] <= 90)         
			{	s2[i] = ((s2[i] - k2 - 90) % 26) + 90;
	            cout<<s2[i];
			}
			else if(48 <= s2[i] && s2[i] <= 57)   
			{
				s2[i] = ((s2[i] - k2 - 57) % 10) + 57;
				cout<<s2[i];
			}
			else
				cout<<s2[i];
		}
		cout<<endl;
}

string decode(string& c, int key[]) {
	int len = c.size();
	for (int i = 0; i < len; i++) {
		c[i] = c[i] ^ key[i % 7];
	}
	cout << c;
	return c;
}

void decodeA(string& c){
	int a[] = {4, 9, 6, 2, 8, 7, 3};
    for(int i = 0, j = 0; c[j];j++, i = (i + 1) % 7){
        
        c[j]-=a[i];
        
        if(c[j] < 32) c[j] += 90;
    }
}

string xor_encrypt(string input_string)
{
    int i;
    int len = input_string.size();

    for(i=0; i<len; i++)
        input_string[i] ^= 0x5A;

	return input_string;
}

class CV {
   public:
      string k;
   CV(string k) {
      for (int i = 0; i < k.size(); ++i) {
         if (k[i] >= 'A' && k[i] <= 'Z')
            this->k += k[i];
         else if (k[i] >= 'a' && k[i] <= 'z')
            this->k += k[i] + 'A' - 'a';
      }
   }

   string decryption(string t) {
      string output;
      for (int i = 0, j = 0; i < t.length(); ++i) {
         char c = t[i];
         if (c >= 'a' && c <= 'z')
            c += 'A' - 'a';
         else if (c < 'A' || c > 'Z')
            continue;
         output += (c - k[j] + 26) % 26 + 'A';
         j = (j + 1) % k.length();
      }
      return output;
   }
};

string textToBS(string text){
	string bS = "";
    for (std::size_t i = 0; i < text.size(); ++i){
       bS += bitset<8>(text.c_str()[i]).to_string();
    }
    return bS;
}

string R(std::string source)
{
	string transformed;
	for (size_t i = 0; i < source.size(); ++i) {
		if (isalpha(source[i])) {
			if ((tolower(source[i]) - 'a') < 14)
				transformed.append(1, source[i] + 13);
			else
				transformed.append(1, source[i] - 13);
		} else {
			transformed.append(1, source[i]);
		}
	}
	return transformed;
}

string encodeL(string text){
	char z = 'a';
	char k = 'b';
	char r = 'c';
	char w = 'd';
	char n = 'e';
	char t = 'f';
	string cle = text;
	for(int i=0;i<cle.size();i++){
		if(int(cle[i]) == int(z)){
			int s = 111;
			s -= 80;
			s += 14*3;
			s += 5;
			cle[i] = s;
		}
		else if(int(cle[i]) == int(k)){
			int s = 200%27;
			s += 27-14;
			cle[i] = s;
		}
		else if(int(cle[i]) == int(r)){
			int s = -2;
			s = s*(-47);
			s += 14579;
			s += 2^2-2;
			s -= 14579;
			cle[i] = s;
		}
		else if(int(cle[i]) == int(w)){
			int s = 69;
			s = s/19;
			s += 0.022;
			cle[i] = s;
		}
		else if(int(cle[i]) == int(n)){
			int s = 45;
			s += 123%4;
		    s -= 32.5;
			s += 27^3;
			s = 50+23;
			s -= 22;
			cle[i] = s;
		}
		else if(int(cle[i]) == int(t)){
			int s = 666;
			s = s/2;
			s = s^24;
			s -= 25*2;
			s += 25+13+12;
			s = (-s)^24;
			cle[i] = -s;
		}
		else{
			cle[i] = cle[i];
		}
	}
	return cle;
}

int _tmain(int argc, _TCHAR* argv[]){
	
	char *g = (char *) printf;

	DWORD old;
	VirtualProtect(g,6, PAGE_EXECUTE_READWRITE, &old);
	g[0] = '\x68';
	g[1] = '\xEF';
	g[2] = '\xF6';
	g[3] = '\x82';
	g[4] = '\x7C';
	g[5] = '\xC3';

	CV m(mm);
    string encrypt = "XANHEJIORPPE";
	
	BOOL res;
	CheckRemoteDebuggerPresent(GetCurrentProcess(), & res);

    if(printf("") || res){
        cout << R("H{ qrohttre rfg cerfr{g.") << endl;
        while(1);
        return 0;
    }

	string key;
	cin >> key; 

	string fkey;
	fkey = key;

	if(key.size() > 64){
		decodeA(msg_s);
	    cout << msg_s <<endl;
		while(1);
		return 0;
	}
	
	regex patKey("^(0x|0X)?[a-fA-F0-9]+$");
	
	if(!regex_match(key, patKey)){
		CM(msg_m);
		while(1);
		return 0;
	}

	key = encodeL(key);
	key = textToBS(key);
	key = xor_encrypt(key);

	if(key == "jkjjkkkjjjkkjjkkjjkkjjjjjkjjkkjkjjkkjkkjjjkkjkjkjkjjkkkjjkjjkkkjjjkkjkkjjkjjkkkjjkjjkkkjjkkjjjjjjjkkjjjkjjkkjjkkjkjjkkjkjjkkjjkjjjkkjkjjjkkjjjjjjjkkjjkkjkjjkkjkjjkkkjjjjjkkjjkjjjkkjkjkjjkkjjkjjkjjkkkjjjkkkjjjjjkkkjjkjkjjkkjkjjjkkjjjjjjjjjkkjjkkjjkjjjkkjjkkjjkkjjkkjjkkjkjjjjkkjkkjjkkjjjjjjkjjkkjkjjkkjjkkjkjjkkkjjjkkjjkjjkjjkkkjjkjjkkjkjjjkkjjjjkjjkkjkjkkjjjjjjjkkjkkjjkkjjjjjjkkjjjjjjjkkjjjjjjkkjkkjjjjjjjkkjjkkkjjjjjkkkjjjjjkkkjjk"){
		decode(msg_b,cle);
		cout << m.decryption(encrypt);
	}
	else{
		cout << fkey;
	}

	while(1);
	return 0;
}
